name: Build and Release OnePlus Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: 'Enter KernelSU Next Branch or commit hash (blank for stable tag)'
        required: true
        type: string
        default: next
      optimize_level:
        description: "Compiler optimization level"
        required: true
        type: choice
        options:
          - O2
          - O3
        default: O2
      android14-6_1_susfs_branch_or_commit:
        description: 'Enter SusFS Branch or commit hash for android14-6.1'
        type: string
        default: ''


jobs:
  build-batch-1:
    name: build-batch-1 (${{ matrix.model }}, ${{ matrix.soc }}, ${{ matrix.branch }}, ${{ matrix.manifest }}, ${{ matrix.android_version }}, ${{ matrix.kernel_version }}, ${{ inputs.ksun_branch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - model: OP12
            soc: pineapple
            branch: oneplus/sm8650
            manifest: oneplus12_v.xml
            android_version: android14
            kernel_version: '6.1'
  
    runs-on: ubuntu-latest
    steps:
      - name: Select Appropriate SusFS Branch
        id: get-susfs-branch
        run: |
          KERNEL_STRING="${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          SUSFS_BRANCH=""
          case "$KERNEL_STRING" in
            "android14-6.1")
              SUSFS_BRANCH="${{ inputs.android14-6_1_susfs_branch_or_commit }}"
              ;;
            *)
              echo "Invalid kernel version or unsupported: $KERNEL_STRING"
              exit 1
              ;;
          esac
          
          echo "susfs_branch=$SUSFS_BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        uses: ./.github/actions
        with:
          model: ${{ matrix.model }}
          soc: ${{ matrix.soc }}
          branch: ${{ matrix.branch }}
          manifest: ${{ matrix.manifest }}
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_commit_hash_or_branch: ${{ steps.get-susfs-branch.outputs.susfs_branch }}
          optimize_level: ${{ inputs.optimize_level }}


  trigger-release:
    needs:
      - build-batch-1

    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: '*TEST BUILD* OnePlus Kernels With KernelSU Next & SUSFS v1.5.10 *TEST BUILD*'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.11-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Device List and Final Release Notes
        id: generate-notes
        run: |
          echo "=== Start building the release notes ==="
          cat << EOF > release_notes.md
          This release contains KernelSU Next and SUSFS v1.5.11
          
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs  
          
          Official Managers:
          -> https://github.com/KernelSU-Next/KernelSU-Next  
          
          Non-Official Managers:
          -> https://github.com/WildKernels/Wild_KSU
          
          ### Built Devices
          
          | Model | Kernel Version |
          |-------|----------------|
          EOF
          
          # Generate table rows
          for file in $(find downloaded-artifacts -name "*.txt" -type f | sort); do
            if [ -f "$file" ]; then
              model=$(basename "$file" .txt)
              version=$(cat "$file")
              printf "| %-12s | %-16s |\n" "$model" "$version" >> release_notes.md
            fi
          done
          
          # Add features and finalize
          cat << 'EOF' >> release_notes.md
          
          ### Features
          - [+] KernelSU-Next / WildKSU Manager Support
          - [+] SUSFS v1.5.11
          - [+] Wireguard Support
          - [+] Magic Mount Support
          - [+] Ptrace message leak fix for kernels < 5.16
          - [+] Manual Hooks [scope_min_manual_hooks_v1.4]
          - [+] CONFIG_TMPFS_XATTR Support [Mountify Support]
          - [+] BBR v1 Support
          - [+] HMBIRD scx support for OnePlus 13 & OnePlus Ace 5 Pro
          - [+] Baseband Guard Support (BBG).
          EOF
          
          # Output for debugging
          echo "--- Final Release Notes ---"
          cat release_notes.md

      - name: Create GitHub Release
        run: |
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Assets Dynamically
        run: |
          for file in ./downloaded-artifacts/*/*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload "${{ env.NEW_TAG }}" "$file" --clobber
            fi
          done
